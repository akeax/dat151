-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParCalc where
import AbsCalc
import LexCalc
import ErrM

}

%name pExp0 Exp0
%name pExp1 Exp1
%name pExp2 Exp2
%name pExp01 Exp01
%name pExp02 Exp02

-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype { Token }

%token 
 '(' { PT _ (TS _ 1) }
 ')' { PT _ (TS _ 2) }
 '*' { PT _ (TS _ 3) }
 '+' { PT _ (TS _ 4) }
 '-' { PT _ (TS _ 5) }
 '/' { PT _ (TS _ 6) }

L_integ  { PT _ (TI $$) }
L_err    { _ }


%%

Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }

Exp0 :: { Exp }
Exp0 : Exp0 '+' Exp1 { EAdd $1 $3 } 
  | Exp0 '-' Exp1 { ESub $1 $3 }
  | Exp01 { $1 }


Exp1 :: { Exp }
Exp1 : Exp1 '*' Exp2 { EMul $1 $3 } 
  | Exp1 '/' Exp2 { EDiv $1 $3 }


Exp2 :: { Exp }
Exp2 : Integer { EInt $1 } 


Exp01 :: { Exp }
Exp01 : Exp02 { $1 } 


Exp02 :: { Exp }
Exp02 : '(' Exp0 ')' { $2 } 



{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

