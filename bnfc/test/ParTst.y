-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParTst where
import AbsTst
import LexTst
import ErrM

}

%name pProgram Program

-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype { Token }

%token 
 '!' { PT _ (TS _ 1) }
 '!=' { PT _ (TS _ 2) }
 '%' { PT _ (TS _ 3) }
 '&' { PT _ (TS _ 4) }
 '&&' { PT _ (TS _ 5) }
 '(' { PT _ (TS _ 6) }
 ')' { PT _ (TS _ 7) }
 '*' { PT _ (TS _ 8) }
 '+' { PT _ (TS _ 9) }
 '++' { PT _ (TS _ 10) }
 '+=' { PT _ (TS _ 11) }
 ',' { PT _ (TS _ 12) }
 '-' { PT _ (TS _ 13) }
 '--' { PT _ (TS _ 14) }
 '-=' { PT _ (TS _ 15) }
 '->' { PT _ (TS _ 16) }
 '.' { PT _ (TS _ 17) }
 '/' { PT _ (TS _ 18) }
 ':' { PT _ (TS _ 19) }
 '::' { PT _ (TS _ 20) }
 ';' { PT _ (TS _ 21) }
 '<' { PT _ (TS _ 22) }
 '<<' { PT _ (TS _ 23) }
 '<=' { PT _ (TS _ 24) }
 '=' { PT _ (TS _ 25) }
 '==' { PT _ (TS _ 26) }
 '>' { PT _ (TS _ 27) }
 '>=' { PT _ (TS _ 28) }
 '>>' { PT _ (TS _ 29) }
 '?' { PT _ (TS _ 30) }
 '[' { PT _ (TS _ 31) }
 ']' { PT _ (TS _ 32) }
 'bool' { PT _ (TS _ 33) }
 'const' { PT _ (TS _ 34) }
 'do' { PT _ (TS _ 35) }
 'double' { PT _ (TS _ 36) }
 'else' { PT _ (TS _ 37) }
 'false' { PT _ (TS _ 38) }
 'for' { PT _ (TS _ 39) }
 'if' { PT _ (TS _ 40) }
 'inline' { PT _ (TS _ 41) }
 'int' { PT _ (TS _ 42) }
 'return' { PT _ (TS _ 43) }
 'struct' { PT _ (TS _ 44) }
 'throw' { PT _ (TS _ 45) }
 'true' { PT _ (TS _ 46) }
 'typedef' { PT _ (TS _ 47) }
 'using' { PT _ (TS _ 48) }
 'void' { PT _ (TS _ 49) }
 'while' { PT _ (TS _ 50) }
 '{' { PT _ (TS _ 51) }
 '||' { PT _ (TS _ 52) }
 '}' { PT _ (TS _ 53) }

L_integ  { PT _ (TI $$) }
L_doubl  { PT _ (TD $$) }
L_charac { PT _ (TC $$) }
L_quoted { PT _ (TL $$) }
L_Id { PT _ (T_Id _) }
L_err    { _ }


%%

Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }
Double  :: { Double }  : L_doubl  { (read ( $1)) :: Double }
Char    :: { Char }    : L_charac { (read ( $1)) :: Char }
String  :: { String }  : L_quoted {  $1 }
Id    :: { Id} : L_Id { Id (mkPosToken $1)}

Program :: { Program }
Program : ListDef { DProgram (reverse $1) } 


ListDef :: { [Def] }
ListDef : {- empty -} { [] } 
  | ListDef Def { flip (:) $1 $2 }


Def :: { Def }
Def : 'inline' Def1 { DInl $2 } 
  | TDef { DTDef $1 }
  | Var ';' { DVar $1 }
  | Struct { DStruct $1 }
  | 'using' QConst ';' { DUsing $2 }
  | Def1 { $1 }


Def1 :: { Def }
Def1 : Type Id '(' ListArg ')' ';' { DProt $1 $2 $4 } 
  | Type Id '(' ListArg ')' '{' ListStmt '}' { DFun $1 $2 $4 (reverse $7) }
  | '(' Def ')' { $2 }


ListArg :: { [Arg] }
ListArg : {- empty -} { [] } 
  | Arg { (:[]) $1 }
  | Arg ',' ListArg { (:) $1 $3 }


ListStmt :: { [Stmt] }
ListStmt : {- empty -} { [] } 
  | ListStmt Stmt { flip (:) $1 $2 }


Stmt :: { Stmt }
Stmt : Expr ';' { SExpr $1 } 
  | Var ';' { SVar $1 }
  | ';' { SEmpty }
  | 'return' Expr ';' { SReturn $2 }
  | 'do' Stmt 'while' '(' Expr ')' { SDoWhile $2 $5 }
  | 'while' '(' Expr ')' Stmt { SWhile $3 $5 }
  | 'if' '(' Expr ')' Stmt { SIf $3 $5 }
  | 'if' '(' Expr ')' Stmt 'else' Stmt { SIfElse $3 $5 $7 }
  | 'for' '(' Var ';' Expr ';' Expr ')' Stmt { SFor $3 $5 $7 $9 }
  | '{' ListStmt '}' { SBlock (reverse $2) }
  | TDef { STDef $1 }
  | Struct { SStruct $1 }


Expr16 :: { Expr }
Expr16 : Integer { EInt $1 } 
  | Double { EDbl $1 }
  | Char { EChar $1 }
  | ListString { EStr $1 }
  | 'true' { ETrue }
  | 'false' { EFalse }
  | QConst { EQConst $1 }
  | '(' Expr ')' { $2 }


ListString :: { [String] }
ListString : String { (:[]) $1 } 
  | String ListString { (:) $1 $2 }


Expr15 :: { Expr }
Expr15 : Expr16 '[' Expr ']' { EIdx $1 $3 } 
  | Expr16 '(' ListExpr ')' { ECall $1 $3 }
  | Expr16 { $1 }


Expr14 :: { Expr }
Expr14 : Expr14 '.' Expr15 { EDot $1 $3 } 
  | Expr14 '->' Expr15 { EArrow $1 $3 }
  | Expr15 '++' { EPostIncr $1 }
  | Expr15 '--' { EPostDecr $1 }
  | '*' Expr15 { EDeref $2 }
  | Expr15 { $1 }


Expr13 :: { Expr }
Expr13 : '!' Expr14 { ENeg $2 } 
  | '++' Expr14 { EPreIncr $2 }
  | '--' Expr14 { EPreDecr $2 }
  | '-' Expr14 { ENumNeg $2 }
  | Expr14 { $1 }


Expr12 :: { Expr }
Expr12 : Expr12 '%' Expr13 { EMod $1 $3 } 
  | Expr12 '*' Expr13 { EMul $1 $3 }
  | Expr12 '/' Expr13 { EDiv $1 $3 }
  | Expr13 { $1 }


Expr11 :: { Expr }
Expr11 : Expr11 '+' Expr12 { EAdd $1 $3 } 
  | Expr11 '-' Expr12 { ESub $1 $3 }
  | Expr12 { $1 }


Expr10 :: { Expr }
Expr10 : Expr10 '<<' Expr11 { ELsh $1 $3 } 
  | Expr10 '>>' Expr11 { ERsh $1 $3 }
  | Expr11 { $1 }


Expr9 :: { Expr }
Expr9 : Expr9 '<' Expr10 { ELt $1 $3 } 
  | Expr9 '>' Expr10 { EGt $1 $3 }
  | Expr9 '<=' Expr10 { ELte $1 $3 }
  | Expr9 '>=' Expr10 { EGte $1 $3 }
  | Expr10 { $1 }


Expr8 :: { Expr }
Expr8 : Expr8 '==' Expr9 { EEq $1 $3 } 
  | Expr8 '!=' Expr9 { ENeq $1 $3 }
  | Expr9 { $1 }


Expr4 :: { Expr }
Expr4 : Expr4 '&&' Expr5 { EAnd $1 $3 } 
  | Expr5 { $1 }


Expr3 :: { Expr }
Expr3 : Expr3 '||' Expr4 { EAnd $1 $3 } 
  | Expr4 { $1 }


Expr2 :: { Expr }
Expr2 : Expr2 '=' Expr3 { EAss $1 $3 } 
  | Expr2 '+=' Expr3 { EIAss $1 $3 }
  | Expr2 '-=' Expr3 { EDAss $1 $3 }
  | Expr2 '?' Expr2 ':' Expr2 { EInlIf $1 $3 $5 }
  | Expr3 { $1 }


Expr1 :: { Expr }
Expr1 : 'throw' Expr2 { EThrow $2 } 
  | Expr2 { $1 }


Expr :: { Expr }
Expr : Expr1 { $1 } 


Expr5 :: { Expr }
Expr5 : Expr6 { $1 } 


Expr6 :: { Expr }
Expr6 : Expr7 { $1 } 


Expr7 :: { Expr }
Expr7 : Expr8 { $1 } 


ListExpr :: { [Expr] }
ListExpr : {- empty -} { [] } 
  | Expr { (:[]) $1 }
  | Expr ',' ListExpr { (:) $1 $3 }


Type :: { Type }
Type : Type '&' { TRef $1 } 
  | 'bool' { TBool }
  | 'double' { TDbl }
  | 'int' { TInt }
  | 'void' { TVoid }
  | QConst { TQConst $1 }


QConst :: { QConst }
QConst : ListConst { DQConst $1 } 


ListConst :: { [Const] }
ListConst : Const { (:[]) $1 } 
  | Const '::' ListConst { (:) $1 $3 }


Const :: { Const }
Const : Id { QCId $1 } 
  | Id '<' ListType '>' { QCConst $1 $3 }


ListType :: { [Type] }
ListType : Type { (:[]) $1 } 
  | Type ',' ListType { (:) $1 $3 }


TDef :: { TDef }
TDef : 'typedef' Type Id ';' { TDef $2 $3 } 


Var :: { Var }
Var : 'const' Var1 { VConst $2 } 
  | Var1 { $1 }


Var1 :: { Var }
Var1 : Type Id { VDecl $1 $2 } 
  | Type Id ',' ListId { VDecls $1 $2 $4 }
  | Type Id '=' Expr { VInit $1 $2 $4 }
  | '(' Var ')' { $2 }


ListId :: { [Id] }
ListId : Id { (:[]) $1 } 
  | Id ',' ListId { (:) $1 $3 }


Arg :: { Arg }
Arg : 'const' Arg1 { AConst $2 } 
  | Arg1 { $1 }


Arg1 :: { Arg }
Arg1 : Type { AType $1 } 
  | Type Id { AName $1 $2 }
  | Type Id '=' Expr { AInit $1 $2 $4 }
  | '(' Arg ')' { $2 }


Struct :: { Struct }
Struct : 'struct' Id '{' ListDef '}' ';' { Struct $2 (reverse $4) } 



{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

