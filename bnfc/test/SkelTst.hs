module SkelTst where

-- Haskell module generated by the BNF converter

import AbsTst
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transId :: Id -> Result
transId x = case x of
  Id str  -> failure x


transProgram :: Program -> Result
transProgram x = case x of
  DProgram defs  -> failure x


transDef :: Def -> Result
transDef x = case x of
  DInl def  -> failure x
  DProt type' id args  -> failure x
  DFun type' id args stmts  -> failure x
  DTDef tdef  -> failure x
  DVar var  -> failure x
  DStruct struct  -> failure x
  DUsing qconst  -> failure x


transStmt :: Stmt -> Result
transStmt x = case x of
  SExpr expr  -> failure x
  SVar var  -> failure x
  SEmpty  -> failure x
  SReturn expr  -> failure x
  SDoWhile stmt expr  -> failure x
  SWhile expr stmt  -> failure x
  SIf expr stmt  -> failure x
  SIfElse expr stmt1 stmt2  -> failure x
  SFor var expr1 expr2 stmt3  -> failure x
  SBlock stmts  -> failure x
  STDef tdef  -> failure x
  SStruct struct  -> failure x


transExpr :: Expr -> Result
transExpr x = case x of
  EInt n  -> failure x
  EDbl d  -> failure x
  EChar c  -> failure x
  EStr strs  -> failure x
  ETrue  -> failure x
  EFalse  -> failure x
  EQConst qconst  -> failure x
  EIdx expr1 expr2  -> failure x
  ECall expr exprs  -> failure x
  EDot expr1 expr2  -> failure x
  EArrow expr1 expr2  -> failure x
  EPostIncr expr  -> failure x
  EPostDecr expr  -> failure x
  EDeref expr  -> failure x
  ENeg expr  -> failure x
  EPreIncr expr  -> failure x
  EPreDecr expr  -> failure x
  ENumNeg expr  -> failure x
  EMod expr1 expr2  -> failure x
  EMul expr1 expr2  -> failure x
  EDiv expr1 expr2  -> failure x
  EAdd expr1 expr2  -> failure x
  ESub expr1 expr2  -> failure x
  ELsh expr1 expr2  -> failure x
  ERsh expr1 expr2  -> failure x
  ELt expr1 expr2  -> failure x
  EGt expr1 expr2  -> failure x
  ELte expr1 expr2  -> failure x
  EGte expr1 expr2  -> failure x
  EEq expr1 expr2  -> failure x
  ENeq expr1 expr2  -> failure x
  EAnd expr1 expr2  -> failure x
  EAss expr1 expr2  -> failure x
  EIAss expr1 expr2  -> failure x
  EDAss expr1 expr2  -> failure x
  EInlIf expr1 expr2 expr3  -> failure x
  EThrow expr  -> failure x


transType :: Type -> Result
transType x = case x of
  TRef type'  -> failure x
  TBool  -> failure x
  TDbl  -> failure x
  TInt  -> failure x
  TVoid  -> failure x
  TQConst qconst  -> failure x


transQConst :: QConst -> Result
transQConst x = case x of
  DQConst consts  -> failure x


transConst :: Const -> Result
transConst x = case x of
  QCId id  -> failure x
  QCConst id types  -> failure x


transTDef :: TDef -> Result
transTDef x = case x of
  TDef type' id  -> failure x


transVar :: Var -> Result
transVar x = case x of
  VConst var  -> failure x
  VDecl type' id  -> failure x
  VDecls type' id ids  -> failure x
  VInit type' id expr  -> failure x


transArg :: Arg -> Result
transArg x = case x of
  AConst arg  -> failure x
  AType type'  -> failure x
  AName type' id  -> failure x
  AInit type' id expr  -> failure x


transStruct :: Struct -> Result
transStruct x = case x of
  Struct id defs  -> failure x



