module AbsCPP where

-- Haskell module generated by the BNF converter


newtype Id = Id ((Int,Int),String) deriving (Eq,Ord,Show)
data Program =
   DProgram [Def]
  deriving (Eq,Ord,Show)

data Def =
   DInl Def
 | DProt Type Id [Arg]
 | DFun Type Id [Arg] [Stmt]
 | DTDef TDef
 | DVar Var
 | DStruct Struct
 | DUsing QConst
  deriving (Eq,Ord,Show)

data Stmt =
   SReturn Expr
 | SDoWhile Stmt Expr
 | SWhile Expr Stmt
 | SIf Expr Stmt
 | SIfElse Expr Stmt Stmt
 | SFor Var Expr Expr Stmt
 | SExpr Expr
 | SVar Var
 | SEmpty
 | SBlock [Stmt]
 | STDef TDef
 | SStruct Struct
  deriving (Eq,Ord,Show)

data Expr =
   EInt Integer
 | EDbl Double
 | EChar Char
 | EStr [String]
 | ETrue
 | EFalse
 | EQConst QConst
 | EIdx Expr Expr
 | ECall Expr [Expr]
 | EDot Expr Expr
 | EArrow Expr Expr
 | EPostIncr Expr
 | EPostDecr Expr
 | EDeref Expr
 | ENeg Expr
 | EPreIncr Expr
 | EPreDecr Expr
 | ENumNeg Expr
 | EMod Expr Expr
 | EMul Expr Expr
 | EDiv Expr Expr
 | EAdd Expr Expr
 | ESub Expr Expr
 | ELsh Expr Expr
 | ERsh Expr Expr
 | ELt Expr Expr
 | EGt Expr Expr
 | ELte Expr Expr
 | EGte Expr Expr
 | EEq Expr Expr
 | ENeq Expr Expr
 | EAnd Expr Expr
 | EAss Expr Expr
 | EIAss Expr Expr
 | EDAss Expr Expr
 | EInlIf Expr Expr Expr
 | EThrow Expr
  deriving (Eq,Ord,Show)

data Type =
   TRef Type
 | TBool
 | TDbl
 | TInt
 | TVoid
 | TQConst QConst
  deriving (Eq,Ord,Show)

data QConst =
   DQConst [Const]
  deriving (Eq,Ord,Show)

data Const =
   QCId Id
 | QCConst Id [Type]
  deriving (Eq,Ord,Show)

data TDef =
   TDef Type Id
  deriving (Eq,Ord,Show)

data Var =
   VConst Var
 | VDecl Type Id
 | VDecls Type Id [Id]
 | VInit Type Id Expr
  deriving (Eq,Ord,Show)

data Arg =
   AConst Arg
 | AType Type
 | AName Type Id
 | AInit Type Id Expr
  deriving (Eq,Ord,Show)

data Struct =
   Struct Id [Def]
  deriving (Eq,Ord,Show)

