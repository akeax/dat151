EVar. Exp3 ::= Ident
EApp. Exp2 ::= Exp2 Exp3
EAbs. Exp  ::= "\\" Ident "->" Exp
coercions Exp 3

Common for all functional languages:
functions take only one argument (apply iteratively!)

Environment: maps identifiers to values
(f x = x would be written using abstraction: f = \x -> x)

main should return integer
